{"version":3,"sources":["interactive_board.tsx","quiz_view.tsx","quiz_model.ts","reportWebVitals.ts","index.tsx"],"names":["Chess","ChessJS","moveHighlightColor","pieceHighlightColor","InteractiveBoard","props","useState","dropSquareStyle","squareStyles","pieceSquare","boardState","setBoardState","getHistory","game","history","verbose","highlightMovesFromSquare","state","square","movesFromSquare","moves","squaresToHighlight","highlightMoves","map","piece","get","reduce","a","boxShadow","borderRadius","backgroundImage","highlightSquares","getSquareStyles","mergeSquareStyles","Object","keys","key","hasOwnProperty","styleSquaresAndHighlight","length","m","to","getStateAfterMove","move","onValidMove","fen","width","Math","min","window","innerWidth","innerHeight","position","onDrop","sourceSquare","targetSquare","from","promotion","onMouseOverSquare","onMouseOutSquare","_square","boardStyle","fontFamily","onDragOverSquare","newState","oldState","onSquareClick","onSquareRightClick","darkSquareStyle","backgroundColor","lightSquareStyle","defaultProps","QuizState","highlightStyle","getPrompt","className","title","message","AskQuestion","questionNumber","quiz","questions","prompt","IncorrectResponse","CorrectResponse","QuizView","initialPosition","setPosition","useReducer","num","incrementQuestionNumBy","useEffect","document","name","oldPrompts","newPrompt","prompts","addPrompt","AwaitingMove","quizState","setQuizState","current","score","incrementScore","gotQuestionWrong","setGotQuestionWrong","list","getElementById","scrollTop","scrollHeight","style","pointerEvents","newPosition","question","correctMove","lastMove","response","Complete","Next","Retry","id","onClick","undo","nextMove","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bed572e5.chunk.js","sourcesContent":["import React, { CSSProperties, useState } from \"react\";\n//import PropTypes from \"prop-types\";\n\n\nimport { ChessInstance } from \"chess.js\";\nimport * as ChessJS from \"chess.js\";\n\nimport Chessboard from \"chessboardjsx\";\nimport * as ChessboardJSX from \"chessboardjsx\";\n//hack - the only way I could get the test and production working\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\n\ntype MaybeSquare = ChessJS.Square | null;\n\ninterface BoardState {\n    /**Styles for squares undergoing a drag-drop */\n    dropSquareStyle: ChessboardJSX.Props[\"dropSquareStyle\"],\n    /**Styles to apply to individual squares in render, used for highlighting possible moves and selected squares */\n    squareStyles: ChessboardJSX.Props[\"squareStyles\"],\n    /**The currently selected piece for click-based movement */\n    pieceSquare: MaybeSquare,\n    /**The series of moves made in this game (not stored in state, but passed in for some functions) */\n    history?: ChessJS.Move[]\n}\n\nexport interface BoardProps {\n    /**The board position of the current chess game, in FEN */\n    position: string,\n    /**The ChessInstance used for determining legal moves and store history (passed in as a prop so parent component can manipulate) */\n    game: ChessInstance,\n    /**Callback used when a valid move is made */\n    onValidMove: (move: ChessJS.ShortMove, position: string) => void\n}\n\nconst moveHighlightColor = \"#666cad\";\nconst pieceHighlightColor = \"#a0dfcb\";\n\n//exported to make writing unit tests easier\nexport const highlightMoveStyle = {\n    backgroundImage: `radial-gradient(circle, ${moveHighlightColor} 10%, transparent 30%)`,\n};\n\nexport const highlightCaptureStyle = {\n    boxShadow: `inset 0 0 0 8px ${moveHighlightColor}`,\n    borderRadius: \"50%\",\n};\n\nexport const highlightSquareStyle = { backgroundColor: pieceHighlightColor };\n\nconst InteractiveBoard : React.FC<BoardProps> = (props) => {\n    const [boardState, setBoardState] = useState<BoardState>({\n        dropSquareStyle: {},\n        squareStyles: {},\n        pieceSquare: null,\n    });\n\n    const updateState = (newState: Partial<BoardState>) => setBoardState(oldState => ({...oldState, ...newState}));\n\n    const getHistory = () => props.game.history({verbose: true});\n\n    //given existing state, compute new state that highlights given squares and applies the base squareStyles\n    const styleSquaresAndHighlight = (state: BoardState, squaresToHighlight: MaybeSquare[]) : BoardState => {\n        const highlightMoves: {[id: string]: CSSProperties} = squaresToHighlight\n            .map(square => ({ square, piece: square && props.game.get(square) }))\n            .reduce((a, {square, piece}) => ({\n                ...a,\n                ...(piece && square && {\n                    [square]: {\n                        boxShadow: `inset 0 0 0 8px ${moveHighlightColor}`,\n                        borderRadius: \"50%\",\n                    } \n                }),\n                ...(piece || (square && {\n                    [square]: {\n                        backgroundImage:\n                        `radial-gradient(circle, ${moveHighlightColor} 10%, transparent 30%)`,\n                    }\n                }))\n            }), {});\n        const highlightSquares = getSquareStyles({...state, history: getHistory()});\n\n        //if a square needs both a move highlight AND a square highlight, then we need those style objects together\n        let mergeSquareStyles:  {[id: string]: CSSProperties} = {};\n        for (var key of Object.keys(highlightSquares))\n            if (highlightMoves.hasOwnProperty(key))\n                mergeSquareStyles[key] = { ...highlightMoves[key], ...highlightSquares[key] };\n        mergeSquareStyles = {...highlightMoves, ...highlightSquares, ...mergeSquareStyles};\n        \n        return {\n            ...state,\n            squareStyles: mergeSquareStyles\n        }\n    };\n\n    const highlightMovesFromSquare = (state: BoardState, square?: ChessJS.Square) => {\n        //get possible moves, highlight squares\n        let movesFromSquare = props.game.moves({square: square, verbose: true});\n\n        const moves = (square && movesFromSquare.length && movesFromSquare)\n            || (state.pieceSquare && props.game.moves({square: state.pieceSquare, verbose: true}))\n            || [];\n\n        return styleSquaresAndHighlight(state, moves.map(m => m.to))\n    };\n\n    const removeHighlightedSquare = () => setBoardState(state => highlightMovesFromSquare(state));\n\n    const onMouseOutSquare =  (_square: any) => removeHighlightedSquare();\n\n    //return a new state with the given move made (if legal), or null if the move is illegal\n    const getStateAfterMove = (state: BoardState, move: ChessJS.ShortMove) => {\n\n        if (props.game.move(move))\n        {\n            if (props.onValidMove)\n                props.onValidMove(move, props.game.fen());\n            \n            return {\n                ...state,\n                //position: props.game.fen(),\n                squareStyles: getSquareStyles({...boardState, history: getHistory()}),\n                pieceSquare: null\n            };\n        }\n        \n        return null;\n        \n    };\n    \n    const onDragOverSquare = () => {\n        updateState({dropSquareStyle: { boxShadow: `inset 0 0 1px 4px ${moveHighlightColor}`}});\n    };\n    \n    const onSquareClick = (square: ChessJS.Square) =>\n        setBoardState(state => \n            (state.pieceSquare && getStateAfterMove(state, {from: state.pieceSquare, to: square, promotion: \"q\"}))\n            || { ...highlightMovesFromSquare(state, square), pieceSquare: props.game.get(square) && square }\n        );\n\n    const onSquareRightClick = () => {\n        //TODO\n    };\n\n    \n    return (<Chessboard\n        width={Math.min(window.innerWidth, window.innerHeight) * 0.8}\n        position={props.position}\n        onDrop={({sourceSquare, targetSquare}) => setBoardState(state => getStateAfterMove(state, {from: sourceSquare, to: targetSquare, promotion: \"q\"}) || state)}\n        onMouseOverSquare={(square) => setBoardState(state => highlightMovesFromSquare(state, square))}\n        onMouseOutSquare={onMouseOutSquare}\n        boardStyle={{\n            fontFamily: \"-sans-serif\"\n        }}\n        squareStyles={boardState.squareStyles}\n        dropSquareStyle={boardState.dropSquareStyle}\n        onDragOverSquare={onDragOverSquare}\n        onSquareClick={onSquareClick}\n        onSquareRightClick={onSquareRightClick}\n        darkSquareStyle={{backgroundColor: \"#929af7\"}}\n        lightSquareStyle={{backgroundColor: \"#e9ebfd\"}}\n        \n    />);\n\n}\n\nInteractiveBoard.defaultProps = {\n    position: \"start\",\n    game: new Chess()\n}\n\nexport default InteractiveBoard;\n\nconst getSquareStyles = ({pieceSquare, history}: Required<BoardState>) => {\n    const {from, to} = history.length ? history[history.length - 1] : { from: null, to: null };\n    const highlightStyle = { backgroundColor: pieceHighlightColor };\n\n    \n    return {\n        ...(pieceSquare && {[pieceSquare]: highlightStyle}),\n        ...(from && { [from]: highlightStyle}),\n        ...(to && { [to]: highlightStyle })\n    }\n}","import React, { PropsWithChildren, useEffect, useReducer, useState } from \"react\";\n\nimport * as ChessJS from \"chess.js\"\nimport InteractiveBoard from \"./interactive_board\";\nimport { QuizModel, viennaGambitAcceptedQuiz } from \"./quiz_model\";\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\n\nenum QuizState {\n    AwaitingMove = \"\",\n    Retry = \"Retry\",\n    Next = \"Next\",\n    Complete = \"Finish Quiz\"\n}\n\nexport interface QuizProps {\n    quiz: QuizModel\n}\n\ninterface QuestionViewProps {\n    quiz: QuizModel,\n    questionNumber: number\n}\n\nconst getPrompt = (className: string, title: string, message?: string) =>\n    <li className={className}>\n        <span><h3>{title}</h3>{message}</span>\n    </li>;\n\nconst AskQuestion = (props: QuestionViewProps) =>\n    getPrompt(\"Question\", `Question ${props.questionNumber + 1}`, props.quiz.questions[props.questionNumber].prompt);\n\ninterface ResponseViewProps {\n    message?: string,\n    move: string\n}\n\nconst IncorrectResponse = (props: ResponseViewProps) =>\n    getPrompt(\"Incorrect\", `${props.move} is incorrect`, props.message);\n\nconst CorrectResponse = (props: ResponseViewProps) => \n    getPrompt(\"Correct\", `${props.move} is correct`, props.message);\n\nexport default function QuizView({quiz}: PropsWithChildren<QuizProps>) {\n    \n    let [position, setPosition] = useState(quiz.initialPosition);\n    let [game] = useState(() => new Chess(position));\n    let [questionNumber, incrementQuestionNumBy] = useReducer((state: number, num: number) => state + num, 0);\n\n    useEffect(() => { \n        document.title = quiz.name;\n    });\n\n    let [prompts, addPrompt] = useReducer((oldPrompts: JSX.Element[], newPrompt: JSX.Element) => \n        [...oldPrompts, newPrompt],\n        [<AskQuestion questionNumber={0} quiz={quiz}/>]);\n\n    let [quizState, setQuizState] = useState(QuizState.AwaitingMove);\n\n    let [score, incrementScore] = useReducer((current: number) => current + 1, 0);\n    let [gotQuestionWrong, setGotQuestionWrong] = useState(false);\n    \n    const onValidMove = (move: ChessJS.ShortMove, newPosition: string) => {\n        setPosition(newPosition);\n        \n        const question = quiz.questions[questionNumber];\n        const correctMove = question.correctMove;\n        const history = game.history();\n        const lastMove = history[history.length - 1];\n        if (move.from === correctMove.from && move.to === correctMove.to) {\n            \n            addPrompt(<CorrectResponse move={lastMove} message={question.response}/>);\n\n            if (gotQuestionWrong) setGotQuestionWrong(false);\n            else incrementScore();\n\n            if (questionNumber === quiz.questions.length - 1)\n                setQuizState(QuizState.Complete);\n            else\n                setQuizState(QuizState.Next);\n        }\n        else {\n            setGotQuestionWrong(true);\n            addPrompt(<IncorrectResponse move={lastMove}/>);\n            setQuizState(QuizState.Retry);\n        }\n    };\n\n    const onButtonClick = () => {\n        switch(quizState) {\n            case QuizState.Retry:\n                game.undo();\n                setPosition(game.fen());\n                break;\n            case QuizState.Next:\n                if (quiz.questions[questionNumber].nextMove) {\n                    game.move(quiz.questions[questionNumber].nextMove);\n                    setPosition(game.fen());\n                }\n                addPrompt(<AskQuestion quiz={quiz} questionNumber={questionNumber+1}/>);\n                incrementQuestionNumBy(1);\n                break;\n            case QuizState.Complete:\n\n        }\n\n        setQuizState(QuizState.AwaitingMove);\n    }\n\n    useEffect(() => {\n        let list = document.getElementById(\"quizPromptList\");\n        if (list) list.scrollTop = list.scrollHeight;\n    }, [prompts]);\n\n    return ( \n        <div className=\"Quiz\">\n            <h2>{quiz.name}</h2>\n            <div className=\"QuizBoardAndPrompts\">\n                <div \n                    className=\"Chessboard\"\n                    style={quizState !== QuizState.AwaitingMove ? {pointerEvents: \"none\"} : {}}\n                >\n                    <InteractiveBoard \n                        key={quiz.initialPosition}\n                        position={position} \n                        game={game}\n                        onValidMove={onValidMove}\n                    />\n                </div>\n                <div className=\"PromptContainer\" id=\"quizPromptList\">\n                    <ul className=\"QuizPrompt\">\n                        {prompts} \n                        {quizState === QuizState.Complete && <li><span>{`You scored ${score}/${quiz.questions.length}`}</span></li>}\n                        {(quizState && <button onClick={onButtonClick}>{quizState}</button>)}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nQuizView.defaultProps = {\n    quiz: viennaGambitAcceptedQuiz\n}","import * as ChessJS from \"chess.js\"\n\nexport interface QuizQuestion {\n    prompt: string,\n    correctMove: ChessJS.ShortMove,\n    response: string,\n    nextMove: ChessJS.ShortMove,\n}\n\nexport interface QuizModel {\n     /** FEN of the  starting position for this line */ \n    initialPosition: string,\n    /** A sequence of questions to ask about the position */\n    questions: QuizQuestion[],\n    /** the name of this quiz */\n    name: string\n}\n\nexport const viennaGambitAcceptedQuiz: QuizModel = {\n    name: \"Vienna Gambit Accepted\",\n    initialPosition: \"rnbqkb1r/pppp1ppp/5n2/4p3/4P3/2N5/PPPP1PPP/R1BQKBNR w KQkq - 2 3\",\n    questions: [\n        {\n            prompt: \"The Vienna Gambit begins with what move in this position?\",\n            correctMove: { from: \"f2\", to: \"f4\" },\n            response: \"White gambits the f pawn\",\n            nextMove: { from: \"e5\", to: \"f4\" }\n        },\n        {\n            prompt: \"Suppose black accepts the gambit, what is white's best response? (Hint: why is this position better than the King's Gambit?)\",\n            correctMove: { from: \"e4\", to: \"e5\", },\n            response: \"White takes space in the centre while gaining tempo by attacking the knight. Note that the knight cannot move forward.\",\n            nextMove: { from: \"d8\", to: \"e7\" }\n        },\n        {\n            prompt: \"Black could try and be clever, pinning your pawn. How can white maintain pressure on the knight?\",\n            correctMove: { from: \"d1\", to: \"e2\" },\n            response: \"This unpins the pawn while developing the queen. Black's knight must now retreat.\",\n            nextMove: { from: \"f6\", to: \"g8\" }\n        },\n        {\n            prompt: \"Now the knight has undeveloped, what's the most accurate continuation for white?\",\n            correctMove: { from: \"g1\", to: \"f3\" },\n            response: \"This defends against Qh4 check, which is particularly nasty because of the pawn on f4.\",\n            nextMove: { from: \"d7\", to: \"d6\" }\n        },\n        {\n            prompt: \"A common idea here is for black to attack your e pawn. How can white punish this?\",\n            correctMove: { from: \"c3\", to: \"d5\" },\n            response: \"This attacks both the queen and the c7 pawn. If the queen goes to e6, then we have a royal fork.\",\n            nextMove: { from: \"e7\", to: \"d7\" }\n        },\n        {\n            prompt: \"Suppose black's queen instead tries to maintain vision on the d7 pawn. Find the winning continuation.\",\n            correctMove: { from: \"d5\", to: \"c7\" },\n            response: \"This forks the king and rook, and the square is only defended by the queen.\",\n            nextMove: { from: \"d7\", to: \"c7\" }\n        },\n        {\n            prompt: \"Finally, what if the queen recaptures the knight?\",\n            correctMove: { from: \"e5\", to: \"d6\" },\n            response: \"This is a discover check that attacks both the king and queen. Black's position crumbles.\",\n            nextMove: { from: \"e7\", to: \"d7\" }\n        },\n    ]\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuizView from './quiz_view';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <QuizView/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}