{"version":3,"sources":["interactive_board.tsx","quiz_view.tsx","quiz_model.ts","reportWebVitals.ts","index.tsx"],"names":["Chess","ChessJS","InteractiveBoard","props","useState","dropSquareStyle","squareStyles","pieceSquare","square","boardState","setBoardState","getHistory","game","history","verbose","highlightMovesFromSquare","state","movesFromSquare","moves","squaresToHighlight","highlightStyles","map","piece","get","reduce","a","boxShadow","borderRadius","background","getSquareStyles","styleSquaresAndHighlight","length","m","to","getStateAfterMove","move","onValidMove","fen","position","onDrop","sourceSquare","targetSquare","from","promotion","onMouseOverSquare","onMouseOutSquare","_square","boardStyle","onDragOverSquare","newState","oldState","onSquareClick","onSquareRightClick","defaultProps","QuizState","highlightStyle","backgroundColor","QuizView","quiz","initialPosition","setPosition","useReducer","num","questionNumber","incrementQuestionNumBy","useEffect","document","title","name","oldPrompts","newPrompt","questions","prompt","prompts","addPrompt","AwaitingMove","quizState","setQuizState","current","score","incrementScore","gotQuestionWrong","setGotQuestionWrong","style","display","pointerEvents","newPosition","question","correctMove","lastMove","response","Complete","Next","Retry","p","i","onClick","undo","nextMove","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d7c58130.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n//import PropTypes from \"prop-types\";\n\n\nimport { ChessInstance } from \"chess.js\";\nimport * as ChessJS from \"chess.js\";\n\nimport Chessboard from \"chessboardjsx\";\nimport * as ChessboardJSX from \"chessboardjsx\";\n//hack - the only way I could get the test and production working\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\n\ntype MaybeSquare = ChessJS.Square | null;\n\ninterface BoardState {\n    //position: string,\n    dropSquareStyle: ChessboardJSX.Props[\"dropSquareStyle\"],\n    squareStyles: ChessboardJSX.Props[\"squareStyles\"],\n    pieceSquare: MaybeSquare,\n    square: MaybeSquare,\n    history?: ChessJS.Move[]\n}\n\nexport interface BoardProps {\n    position: string,\n    game: ChessInstance,\n    onValidMove: (move: ChessJS.ShortMove, position: string) => void\n}\n\nconst InteractiveBoard : React.FC<BoardProps> = (props) => {\n    const [boardState, setBoardState] = useState<BoardState>({\n        //position: props.position,\n        //style for active drop square\n        dropSquareStyle: {},\n        //custom square styles\n        squareStyles: {},\n        //square with clicked piece\n        pieceSquare: null,\n        //currently clicked square\n        square: null,\n    });\n\n    const updateState = (newState: Partial<BoardState>) => setBoardState(oldState => ({...oldState, ...newState}));\n\n    const getHistory = () => props.game.history({verbose: true});\n\n    //given existing state, compute new state that highlights given squares and applies the base squareStyles\n    const styleSquaresAndHighlight = (state: BoardState, squaresToHighlight: MaybeSquare[]) : BoardState => {\n        const highlightStyles = squaresToHighlight\n            .map(square => ({ square, piece: square && props.game.get(square) }))\n            .reduce((a, {square, piece}) => ({\n                ...a,\n                ...(piece && square && {\n                    [square]: {\n                        boxShadow: \"inset 0 0 0 5px rgb(175, 160, 143)\",\n                        borderRadius: \"50%\",\n                    } \n                }),\n                ...(piece || (square && {\n                    [square]: {\n                        background:\n                        \"radial-gradient(circle, rgb(175, 160, 143) 10%, transparent 30%)\",\n                        borderRadius: \"20%\"\n                    }\n                }))\n            }), {});\n        \n        return {\n            ...state,\n            squareStyles: {\n                ...getSquareStyles({...state, history: getHistory()}),\n                ...highlightStyles\n            }\n        }\n    };\n\n    const highlightMovesFromSquare = (state: BoardState, square?: ChessJS.Square) => {\n        //get possible moves, highlight squares\n        let movesFromSquare = props.game.moves({square: square, verbose: true});\n\n        const moves = (square && movesFromSquare.length && movesFromSquare)\n            || (state.pieceSquare && props.game.moves({square: state.pieceSquare, verbose: true}))\n            || [];\n\n        return styleSquaresAndHighlight(state, moves.map(m => m.to))\n    };\n\n    const removeHighlightedSquare = () => setBoardState(state => highlightMovesFromSquare(state));\n\n    const onMouseOutSquare =  (_square: any) => removeHighlightedSquare();\n\n    //return a new state with the given move made (if legal), or null if the move is illegal\n    const getStateAfterMove = (state: BoardState, move: ChessJS.ShortMove) => {\n\n        if (props.game.move(move))\n        {\n            if (props.onValidMove)\n                props.onValidMove(move, props.game.fen());\n            \n            return {\n                ...state,\n                //position: props.game.fen(),\n                squareStyles: getSquareStyles({...boardState, history: getHistory()}),\n                pieceSquare: null\n            };\n        }\n        \n        return null;\n        \n    };\n    \n    const onDragOverSquare = () => {\n        updateState({dropSquareStyle: { boxShadow: \"inset 0 0 1px 4px rgb(175, 160, 143)\"}});\n    };\n    \n    const onSquareClick = (square: ChessJS.Square) =>\n        setBoardState(state => \n            (state.pieceSquare && getStateAfterMove(state, {from: state.pieceSquare, to: square, promotion: \"q\"}))\n            || { ...highlightMovesFromSquare(state, square), pieceSquare: props.game.get(square) && square }\n        );\n\n    const onSquareRightClick = () => {\n        //TODO\n    };\n\n    \n    return (<Chessboard\n        position={props.position}\n        onDrop={({sourceSquare, targetSquare}) => setBoardState(state => getStateAfterMove(state, {from: sourceSquare, to: targetSquare, promotion: \"q\"}) || state)}\n        onMouseOverSquare={(square) => setBoardState(state => highlightMovesFromSquare(state, square))}\n        onMouseOutSquare={onMouseOutSquare}\n        boardStyle={{\n            borderRadius: \"5px\",\n            boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n        }}\n        squareStyles={boardState.squareStyles}\n        dropSquareStyle={boardState.dropSquareStyle}\n        onDragOverSquare={onDragOverSquare}\n        onSquareClick={onSquareClick}\n        onSquareRightClick={onSquareRightClick}\n    />);\n\n}\n\nInteractiveBoard.defaultProps = {\n    position: \"start\",\n    game: new Chess()\n}\n\nexport default InteractiveBoard;\n\nconst getSquareStyles = ({pieceSquare, history}: Required<BoardState>) : ChessboardJSX.Props[\"squareStyles\"] => {\n    const {from, to} = history.length ? history[history.length - 1] : { from: null, to: null };\n    const highlightColor = \"rgba(255, 255, 0, 0.4)\";\n    const highlightStyle = { backgroundColor: highlightColor };\n\n    \n    return {\n        ...(pieceSquare && {[pieceSquare]: highlightStyle}),\n        ...(from && { [from]: highlightStyle}),\n        ...(to && { [to]: highlightStyle })\n    }\n}","import React, { Fragment, PropsWithChildren, useEffect, useReducer, useState } from \"react\";\n\nimport * as ChessJS from \"chess.js\"\nimport InteractiveBoard from \"./interactive_board\";\nimport { QuizModel, viennaGambitAcceptedQuiz } from \"./quiz_model\";\nconst Chess = typeof ChessJS === \"function\" ? ChessJS : ChessJS.Chess;\n\nenum QuizState {\n    AwaitingMove = \"\",\n    Retry = \"Retry\",\n    Next = \"Next\",\n    Complete = \"Finish Quiz\"\n}\n\nexport interface QuizProps {\n    quiz: QuizModel\n}\n\nexport default function QuizView({quiz}: PropsWithChildren<QuizProps>) {\n    \n    let [position, setPosition] = useState(quiz.initialPosition);\n    let [game] = useState(() => new Chess(position));\n    let [questionNumber, incrementQuestionNumBy] = useReducer((state: number, num: number) => state + num, 0);\n\n    useEffect(() => { \n        document.title = quiz.name;\n    });\n\n    let [prompts, addPrompt] = useReducer((oldPrompts: string[], newPrompt: string) => [...oldPrompts, newPrompt],\n        [quiz.questions[0].prompt]);\n\n    let [quizState, setQuizState] = useState(QuizState.AwaitingMove);\n\n    let [score, incrementScore] = useReducer((current: number) => current + 1, 0);\n    let [gotQuestionWrong, setGotQuestionWrong] = useState(false);\n    \n    const onValidMove = (move: ChessJS.ShortMove, newPosition: string) => {\n        setPosition(newPosition);\n        \n        const question = quiz.questions[questionNumber];\n        const correctMove = question.correctMove;\n        const history = game.history();\n        const lastMove = history[history.length - 1];\n        if (move.from === correctMove.from && move.to === correctMove.to) {\n            \n            addPrompt(`${lastMove} is correct. ${question.response}`);\n\n            if (gotQuestionWrong) setGotQuestionWrong(false);\n            else incrementScore();\n\n            if (questionNumber === quiz.questions.length - 1)\n                setQuizState(QuizState.Complete);\n            else\n                setQuizState(QuizState.Next);\n        }\n        else {\n            setGotQuestionWrong(true);\n            addPrompt(`${lastMove} is incorrect`);\n            setQuizState(QuizState.Retry);\n        }\n    };\n\n    const onButtonClick = () => {\n        switch(quizState) {\n            case QuizState.Retry:\n                game.undo();\n                setPosition(game.fen());\n                break;\n            case QuizState.Next:\n                if (quiz.questions[questionNumber].nextMove) {\n                    game.move(quiz.questions[questionNumber].nextMove);\n                    setPosition(game.fen());\n                }\n                addPrompt(quiz.questions[questionNumber + 1].prompt);\n                incrementQuestionNumBy(1);\n                break;\n            case QuizState.Complete:\n\n        }\n\n        setQuizState(QuizState.AwaitingMove);\n    }\n\n    return ( \n        <Fragment>\n            <h1>{quiz.name}</h1>\n            <div style={{display: \"flex\"}}>\n                <div style={quizState !== QuizState.AwaitingMove ? {pointerEvents: \"none\"} : {}}>\n                    <InteractiveBoard \n                        key={quiz.initialPosition}\n                        position={position} \n                        game={game}\n                        onValidMove={onValidMove}\n                    />\n                </div>\n                <ul>\n                    {prompts.map((p, i) => <li key={i}>{p}</li>)} \n                    {quizState === QuizState.Complete && <li>{`You scored ${score}/${quiz.questions.length}`}</li>}\n                    {(quizState && <li key={\"retry\"}><button onClick={onButtonClick}>{quizState}</button></li>)}\n                </ul>\n            </div>\n        </Fragment>\n    );\n}\n\nQuizView.defaultProps = {\n    quiz: viennaGambitAcceptedQuiz\n}","import * as ChessJS from \"chess.js\"\n\nexport interface QuizQuestion {\n    prompt: string,\n    correctMove: ChessJS.ShortMove,\n    response: string,\n    nextMove: ChessJS.ShortMove,\n}\n\nexport interface QuizModel {\n     /** FEN of the  starting position for this line */ \n    initialPosition: string,\n    /** A sequence of questions to ask about the position */\n    questions: QuizQuestion[],\n    /** the name of this quiz */\n    name: string\n}\n\nexport const viennaGambitAcceptedQuiz: QuizModel = {\n    name: \"Vienna Gambit Accepted\",\n    initialPosition: \"rnbqkb1r/pppp1ppp/5n2/4p3/4P3/2N5/PPPP1PPP/R1BQKBNR w KQkq - 2 3\",\n    questions: [\n        {\n            prompt: \"The Vienna Gambit begins with what move in this position?\",\n            correctMove: { from: \"f2\", to: \"f4\" },\n            response: \"White gambits the f pawn\",\n            nextMove: { from: \"e5\", to: \"f4\" }\n        },\n        {\n            prompt: \"Suppose black accepts the gambit, what is white's best response? (Hint: why is this position better than the King's Gambit?)\",\n            correctMove: { from: \"e4\", to: \"e5\", },\n            response: \"White takes space in the centre while gaining tempo by attacking the knight. Note that the knight cannot move forward.\",\n            nextMove: { from: \"d8\", to: \"e7\" }\n        },\n        {\n            prompt: \"Black could try and be clever, pinning your pawn. How can white maintain pressure on the knight?\",\n            correctMove: { from: \"d1\", to: \"e2\" },\n            response: \"This unpins the pawn while developing the queen. Black's knight must now retreat.\",\n            nextMove: { from: \"f6\", to: \"g8\" }\n        },\n        {\n            prompt: \"Now the knight has undeveloped, what's the most accurate continuation for white?\",\n            correctMove: { from: \"g1\", to: \"f3\" },\n            response: \"This defends against Qh4 check, which is particularly nasty because of the pawn on f4.\",\n            nextMove: { from: \"d7\", to: \"d6\" }\n        },\n        {\n            prompt: \"A common idea here is for black to attack your e pawn. How can white punish this?\",\n            correctMove: { from: \"c3\", to: \"d5\" },\n            response: \"This attacks both the queen and the c7 pawn. If the queen goes to e6, then we have a royal fork.\",\n            nextMove: { from: \"e7\", to: \"d7\" }\n        },\n        {\n            prompt: \"Suppose black's queen instead tries to maintain vision on the d7 pawn. Find the winning continuation.\",\n            correctMove: { from: \"d5\", to: \"c7\" },\n            response: \"This forks the king and rook, and the square is only defended by the queen.\",\n            nextMove: { from: \"d7\", to: \"c7\" }\n        },\n        {\n            prompt: \"Finally, what if the queen recaptures the knight?\",\n            correctMove: { from: \"e5\", to: \"d6\" },\n            response: \"This is a discover check that attacks both the king and queen. Black's position crumbles.\",\n            nextMove: { from: \"e7\", to: \"d7\" }\n        },\n    ]\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuizView from './quiz_view';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <QuizView/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}